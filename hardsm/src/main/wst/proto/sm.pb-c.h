/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sm.proto */

#ifndef PROTOBUF_C_sm_2eproto__INCLUDED
#define PROTOBUF_C_sm_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _BoolValue BoolValue;
typedef struct _IntValue IntValue;
typedef struct _StrValue StrValue;
typedef struct _BytesValue BytesValue;
typedef struct _KeyPair KeyPair;
typedef struct _DevStatus DevStatus;
typedef struct _CtxInfo CtxInfo;
typedef struct _Response Response;


/* --- enums --- */


/* --- messages --- */

struct  _BoolValue
{
  ProtobufCMessage base;
  protobuf_c_boolean has_value;
  protobuf_c_boolean value;
};
#define BOOL_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bool_value__descriptor) \
    , 0,0 }


struct  _IntValue
{
  ProtobufCMessage base;
  protobuf_c_boolean has_value;
  int32_t value;
};
#define INT_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&int_value__descriptor) \
    , 0,0 }


struct  _StrValue
{
  ProtobufCMessage base;
  char *value;
};
#define STR_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&str_value__descriptor) \
    , NULL }


struct  _BytesValue
{
  ProtobufCMessage base;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
  protobuf_c_boolean has_len;
  int32_t len;
};
#define BYTES_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bytes_value__descriptor) \
    , 0,{0,NULL}, 0,0 }


struct  _KeyPair
{
  ProtobufCMessage base;
  char *public_key;
  char *private_key;
};
#define KEY_PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&key_pair__descriptor) \
    , NULL, NULL }


struct  _DevStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_index;
  int32_t index;
  protobuf_c_boolean has_opened;
  protobuf_c_boolean opened;
  protobuf_c_boolean has_logged_in;
  protobuf_c_boolean logged_in;
  protobuf_c_boolean has_pipes_count;
  int32_t pipes_count;
  protobuf_c_boolean has_free_pipes_count;
  int32_t free_pipes_count;
  protobuf_c_boolean has_secret_key_count;
  int32_t secret_key_count;
  protobuf_c_boolean has_public_key_count;
  int32_t public_key_count;
  protobuf_c_boolean has_private_key_count;
  int32_t private_key_count;
};
#define DEV_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dev_status__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _CtxInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_protect_key;
  protobuf_c_boolean protect_key;
  protobuf_c_boolean has_device_count;
  int32_t device_count;
  char *api_version;
};
#define CTX_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctx_info__descriptor) \
    , 0,0, 0,0, NULL }


typedef enum {
  RESPONSE__DATA__NOT_SET = 0,
  RESPONSE__DATA_BOOL_VALUE = 4,
  RESPONSE__DATA_INT_VALUE = 5,
  RESPONSE__DATA_STR_VALUE = 6,
  RESPONSE__DATA_BYTES_VALUE = 7,
  RESPONSE__DATA_KEY_PAIR = 8,
  RESPONSE__DATA_DEVICE_STATUS = 9,
  RESPONSE__DATA_CTX_INFO = 10,
} Response__DataCase;

struct  _Response
{
  ProtobufCMessage base;
  protobuf_c_boolean has_code;
  int32_t code;
  char *msg;
  Response__DataCase data_case;
  union {
    BoolValue *bool_value;
    IntValue *int_value;
    StrValue *str_value;
    BytesValue *bytes_value;
    KeyPair *key_pair;
    DevStatus *device_status;
    CtxInfo *ctx_info;
  };
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , 0,0, NULL, RESPONSE__DATA__NOT_SET, {0} }


/* BoolValue methods */
void   bool_value__init
                     (BoolValue         *message);
size_t bool_value__get_packed_size
                     (const BoolValue   *message);
size_t bool_value__pack
                     (const BoolValue   *message,
                      uint8_t             *out);
size_t bool_value__pack_to_buffer
                     (const BoolValue   *message,
                      ProtobufCBuffer     *buffer);
BoolValue *
       bool_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bool_value__free_unpacked
                     (BoolValue *message,
                      ProtobufCAllocator *allocator);
/* IntValue methods */
void   int_value__init
                     (IntValue         *message);
size_t int_value__get_packed_size
                     (const IntValue   *message);
size_t int_value__pack
                     (const IntValue   *message,
                      uint8_t             *out);
size_t int_value__pack_to_buffer
                     (const IntValue   *message,
                      ProtobufCBuffer     *buffer);
IntValue *
       int_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   int_value__free_unpacked
                     (IntValue *message,
                      ProtobufCAllocator *allocator);
/* StrValue methods */
void   str_value__init
                     (StrValue         *message);
size_t str_value__get_packed_size
                     (const StrValue   *message);
size_t str_value__pack
                     (const StrValue   *message,
                      uint8_t             *out);
size_t str_value__pack_to_buffer
                     (const StrValue   *message,
                      ProtobufCBuffer     *buffer);
StrValue *
       str_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   str_value__free_unpacked
                     (StrValue *message,
                      ProtobufCAllocator *allocator);
/* BytesValue methods */
void   bytes_value__init
                     (BytesValue         *message);
size_t bytes_value__get_packed_size
                     (const BytesValue   *message);
size_t bytes_value__pack
                     (const BytesValue   *message,
                      uint8_t             *out);
size_t bytes_value__pack_to_buffer
                     (const BytesValue   *message,
                      ProtobufCBuffer     *buffer);
BytesValue *
       bytes_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bytes_value__free_unpacked
                     (BytesValue *message,
                      ProtobufCAllocator *allocator);
/* KeyPair methods */
void   key_pair__init
                     (KeyPair         *message);
size_t key_pair__get_packed_size
                     (const KeyPair   *message);
size_t key_pair__pack
                     (const KeyPair   *message,
                      uint8_t             *out);
size_t key_pair__pack_to_buffer
                     (const KeyPair   *message,
                      ProtobufCBuffer     *buffer);
KeyPair *
       key_pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   key_pair__free_unpacked
                     (KeyPair *message,
                      ProtobufCAllocator *allocator);
/* DevStatus methods */
void   dev_status__init
                     (DevStatus         *message);
size_t dev_status__get_packed_size
                     (const DevStatus   *message);
size_t dev_status__pack
                     (const DevStatus   *message,
                      uint8_t             *out);
size_t dev_status__pack_to_buffer
                     (const DevStatus   *message,
                      ProtobufCBuffer     *buffer);
DevStatus *
       dev_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dev_status__free_unpacked
                     (DevStatus *message,
                      ProtobufCAllocator *allocator);
/* CtxInfo methods */
void   ctx_info__init
                     (CtxInfo         *message);
size_t ctx_info__get_packed_size
                     (const CtxInfo   *message);
size_t ctx_info__pack
                     (const CtxInfo   *message,
                      uint8_t             *out);
size_t ctx_info__pack_to_buffer
                     (const CtxInfo   *message,
                      ProtobufCBuffer     *buffer);
CtxInfo *
       ctx_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctx_info__free_unpacked
                     (CtxInfo *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*BoolValue_Closure)
                 (const BoolValue *message,
                  void *closure_data);
typedef void (*IntValue_Closure)
                 (const IntValue *message,
                  void *closure_data);
typedef void (*StrValue_Closure)
                 (const StrValue *message,
                  void *closure_data);
typedef void (*BytesValue_Closure)
                 (const BytesValue *message,
                  void *closure_data);
typedef void (*KeyPair_Closure)
                 (const KeyPair *message,
                  void *closure_data);
typedef void (*DevStatus_Closure)
                 (const DevStatus *message,
                  void *closure_data);
typedef void (*CtxInfo_Closure)
                 (const CtxInfo *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor bool_value__descriptor;
extern const ProtobufCMessageDescriptor int_value__descriptor;
extern const ProtobufCMessageDescriptor str_value__descriptor;
extern const ProtobufCMessageDescriptor bytes_value__descriptor;
extern const ProtobufCMessageDescriptor key_pair__descriptor;
extern const ProtobufCMessageDescriptor dev_status__descriptor;
extern const ProtobufCMessageDescriptor ctx_info__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sm_2eproto__INCLUDED */
